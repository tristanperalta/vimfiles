# #!/usr/bin/env ruby
snippet #!
	#!/usr/bin/env ruby

# New Block
snippet =b
	=begin rdoc
		${1}
	=end
snippet y
	:yields: ${1:arguments}
snippet rb
	#!/usr/bin/env ruby -wKU
snippet begin
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
	end

snippet require
	require "${1}"
	${2}
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end
snippet while
	while ${1:condition}
		${2}
	end
snippet for
	for ${1:e} in ${2:c}
		${3}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet cla class .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet cla class .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		def initialize(${2:args})
			${3}
		end


	end
snippet cla class .. < ParentClass .. initialize .. end
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end
	end
snippet cla ClassName = Struct .. do .. end
	${1:`substitute(Filename(), '^.', '\u&', '')`} = Struct.new(:${2:attr_names}) do
		def ${3:method_name}
			${4}
		end
	end
snippet cla class BlankSlate .. initialize .. end
	class ${1:BlankSlate}
		instance_methods.each { |meth| undef_method(meth) unless meth =~ /\A__/ }
snippet cla class << self .. end
	class << ${1:self}
		${2}
	end
# class .. < DelegateClass .. initialize .. end
snippet cla-
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < DelegateClass(${2:ParentClass})
		def initialize(${3:args})
			super(${4:del_obj})

			${5}
		end


	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mod module .. module_function .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module_function

		${2}
	end
snippet mod module .. ClassMethods .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		module ClassMethods
			${2}
		end

		module InstanceMethods

		end

		def self.included(receiver)
			receiver.extend         ClassMethods
			receiver.send :include, InstanceMethods
		end
	end
# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
# include Enumerable
snippet Enum
	include Enumerable

	def each(&block)
		${1}
	end
# include Comparable
snippet Comp
	include Comparable

	def <=>(other)
		${1}
	end
# extend Forwardable
snippet Forw-
	extend Forwardable
# def self
snippet defs
	def self.${1:class_method_name}
		${2}
	end
# def method_missing
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end
# usage_if()
snippet usai
	if ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet file File.foreach() { |line| .. }
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet file File.read()
	File.read(${1:"path/to/file"})${2}
snippet Dir Dir.global() { |file| .. }
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
snippet Dir Dir[".."]
	Dir[${1:"glob/**/*.rb"}]${2}
snippet dir
	Filename.dirname(__FILE__)
snippet deleteif
	delete_if { |${1:e}| ${2} }
snippet fill
	fill(${1:range}) { |${2:i}| ${3} }
# flatten_once()
snippet flao
	inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
# downto(0) { |n| .. }
snippet downto
	downto(${1:0}) { |${2:n}| ${3} }
snippet ste
	step(${1:2}) { |${2:n}| ${3} }
snippet times
	times { |${1:n}| ${2} }
snippet upto
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet loop
	loop { ${1} }
snippet each
	each { |${1:e}| ${2} }
	${3}
snippet eachd
	each do |${1:e}|
		${2}
	end
	${3}
snippet inject
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
	${5}
snippet injectd
	inject(${1:init}) do |${2:mem}, ${3:var}|
		${4}
	end
	${5}
snippet map
	map { |${1:e}| ${2} }
	${3}
snippet mapd
	map do |${1:e}|
		${2}
	end
	${3}
snippet sortby
	sort_by { |${1:e}| ${2} }
snippet all
	all? { |${1:e}| ${2} }
	${3}
snippet any
	any? { |${1:e}| ${2} }
	${3}
snippet classify
	classify { |${1:e}| ${2} }
	${3}
snippet collect
	collect { |${1:e}| ${2} }
	${3}
snippet collectd
	collect do |${1:e}|
		${2}
	end
	${3}
snippet detect
	detect { |${1:e}| ${2} }
	${3}
snippet detectd
	detect do |${1:e}|
		${2}
	end
	${3}
snippet fetch
	fetch(${1:name}) { |${2:key}| ${3} }
	${4}
snippet find
	find { |${1:e}| ${2} }
	${3}
snippet findd
	find do |${1:e}|
		${2}
	end
	${3}
snippet finda
	find_all { |${1:e}| ${2} }
snippet findad
	find_all do |${1:e}|
		${2}
	end
snippet grep
	grep(${1:/pattern/}) { |${2:match}| ${3} }
	${4}
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
	${5}
snippet scan
	scan(${1:/pattern/}) { |${2:match}| ${3} }
	${4}
snippet scand
	scan(${1:/pattern/}) do |${2:match}|
		${3}
	end
	${4}
snippet max
	max { |a, b| ${1} }
	${2}
snippet min
	min { |a, b| ${1} }
	${2}
snippet par
	partition { |${1:e}| ${2} }
snippet pard
	partition do |${1:e}|
		${2}
	end
snippet reject
	reject { |${1:e}| ${2} }
	${3}
snippet rejectd
	reject do |${1:e}|
		${2}
	end
	${3}
snippet select
	select { |${1:e}| ${2} }
	${3}
snippet selectd
	select do |${1:e}|
		${2}
	end
	${3}
snippet lambda
	lambda { |${1:args}| ${2} }
	${3}
snippet ->
	-> { |${1:args}| ${2} }
	${3}
snippet do
	do |${1:variable}|
		${2}
	end
	${3}
snippet :
	${1:key}: ${2:"value"}${3}
snippet ::
	"${1:key}" => "${2:value}"${3}
snippet desc
	describe ${1:"describe"} do
		${2}
	end
snippet context
	context "${1}" do
		${2}
	end
snippet it
	it "${1}" do
		${2}
	end
snippet let
	let(:${1}) { ${2} }${3}
snippet let!
	let!(:${1}) { ${2} }${3}
snippet before
	before do
		${1}
	end
snippet expect
	expect(${1}).to ${2}
snippet expect:eq
	expect(${1}).to eq ${2}
snippet expect:be
	expect(${1}).to be_${2}
snippet expect:true
	expect(${1}).to be_true${2}
snippet expect:false
	expect(${1}).to be_false${2}
snippet expect:error
	expect(${1}).to raise_error${2}
snippet expect:receive
	expect(${1}).to receive(${2})${3}
snippet expect:change
	expect(${1}).to change { ${2} }
